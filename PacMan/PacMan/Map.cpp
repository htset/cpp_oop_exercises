#include "Map.h"
#include "Entity.h"

string chart[32] =
{
"****************************",
"*............**............*",
"*.****.*****.**.*****.****.*",
"*.****.*****.**.*****.****.*",
"*.****.*****.**.*****.****.*",
"*..........................*",
"*.****.**.********.**.****.*",
"*.****.**.********.**.****.*",
"*......**....**....**......*",
"******.***** ** *****.******",
"******.***** ** *****.******",
"******.**          **.******",
"******.** ******** **.******",
"******.** ******** **.******",
"*     .   ********   .     *",
"******.** ******** **.******",
"******.** ******** **.******",
"******.**          **.******",
"******.**.********.**.******",
"******.**.********.**.******",
"*............**............*",
"*.****.*****.**.*****.****.*",
"*.****.*****.**.*****.****.*",
"*...**................**...*",
"***.**.**.********.**.**.***",
"***.**.**.********.**.**.***",
"*...**.**....**....**.**...*",
"*......**....**....**......*",
"*.**********.**.**********.*",
"*.**********....**********.*",
"*..........................*",
"****************************"
};

Pair::Pair()
{
  x = 0;
  y = 0;
}

Pair::Pair(int X, int Y)
{
  x = X;
  y = Y;
}

int Pair::operator==(Pair p)
{
  if (x == p.x && y == p.y)
    return true;
  return false;
}

Block::Block(BlockType type)
{
  this->type = type;
}

Block::Block()
{
  this->type = Empty;
}

Map::Map()
{
  pointsLeft = 0;
  for (int i = 0; i < 32; i++)
  {
    string line = chart[i];
    for (int j = 0; j < 28; j++)
    {
      map[i][j].entity = NULL;

      if (line[j] == '.')
      {
        map[i][j].type = Point;
        pointsLeft++;
      }
      else if (line[j] == '*')
        map[i][j].type = Wall;
      if (line[j] == ' ')
        map[i][j].type = Empty;
    }
  }

}

void Map::print()
{
  string output;
  system("cls");
  for (int i = 0; i < 32; i++)
  {
    for (int j = 0; j < 28; j++)
    {
      if (map[i][j].entity != NULL)
      {
        output += map[i][j].entity->printSymbol();
      }
      else
      {
        if (map[i][j].type == Wall)
          output += "*";
        else if (map[i][j].type == Point)
          output += ".";
        else if (map[i][j].type == Empty)
          output += " ";
      }
    }
    output += '\n';
  }
  cout << output;
}

